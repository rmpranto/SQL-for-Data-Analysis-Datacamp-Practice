###################  CASE WHEN ##############################

-- Create a CASE statement that identifies whether a match in Germany included FC Bayern Munich, FC Schalke 04, or neither as the home team.Group the query by the CASE statement alias, home_team.
SELECT 
	case when hometeam_id = 10189 Then 'FC Schalke 04'
        when hometeam_id = 9823 Then 'FC Bayern Munich'
         ELSE 'Other' END AS home_team,
	COUNT(id) AS total_matches
FROM matches_germany
GROUP BY home_team;


--Left join the teams_spain table team_api_id column to the matches_spain table awayteam_id. This allows us to retrieve the away team's identity.Select team_long_name from teams_spain as opponent and complete the CASE statement from Step 1.
SELECT 
	m.date,
	--Select the team long name column and call it 'opponent'
	t.team_long_name AS opponent, 
	-- Complete the CASE statement with an alias
	CASE WHEN m.home_goal > m.away_goal THEN 'Home win!'
         WHEN m.home_goal < m.away_goal THEN 'Home loss :('
         ELSE 'Tie' END AS outcome
FROM matches_spain AS m
-- Left join teams_spain onto matches_spain
LEFT JOIN teams_spain AS t
ON m.awayteam_id = t.team_api_id;
-- Filter for Barcelona as the home team
WHERE m.hometeam_id = 8634; 


--Complete the CASE statement to identify Barcelona's away team games (id = 8634) as wins, losses, or ties. Left join the teams_spain table team_api_id column on the matches_spain table hometeam_id column. This retrieves the identity of the home team opponent.
Filter the query to only include matches where Barcelona was the away team.

-- Select matches where Barcelona was the away team
SELECT  
	m.date,
	t.team_long_name AS opponent,
	case WHEN m.home_goal < m.away_goal Then 'Barcelona win!'
        WHEN m.home_goal > m.away_goal Then 'Barcelona loss :(' 
        Else 'Tie' end as outcome
FROM matches_spain AS m
-- Join teams_spain to matches_spain
LEFT JOIN teams_spain AS t 
ON m.hometeam_id = t.team_api_id
WHERE m.awayteam_id = 8634;

--Construct the final CASE statement identifying who won each match. Note there are 3 possible outcomes, but 5 conditions that you need to identify.Fill in the logical operators to identify Barcelona or Real Madrid as the winne

SELECT 
	date,
	CASE WHEN hometeam_id = 8634 THEN 'FC Barcelona' 
         ELSE 'Real Madrid CF' END as home,
	CASE WHEN awayteam_id = 8634 THEN 'FC Barcelona' 
         ELSE 'Real Madrid CF' END as away,
	-- Identify all possible match outcomes
	CASE WHEN home_goal > away_goal AND hometeam_id = 8634 THEN 'Barcelona win!'
        WHEN home_goal > away_goal AND hometeam_id = 8633 THEN 'Real Madrid win!'
        WHEN home_goal < away_goal AND awayteam_id = 8634 THEN 'Barcelona win!'
        WHEN home_goal < away_goal AND awayteam_id = 8633 THEN 'Real Madrid win!'
        ELSE 'Tie!' end as outcome
FROM matches_spain
WHERE (awayteam_id = 8634 OR hometeam_id = 8634)
      AND (awayteam_id = 8633 OR hometeam_id = 8633);

--Select the home_goal and away_goal for each match. Use the CASE statement in the WHERE clause to filter all NULL values generated by the statement in the previous step.

-- Select the season, date, home_goal, and away_goal columns
SELECT 
	season, date, home_goal, away_goal
FROM matches_italy
WHERE 
-- Exclude games not won by Bologna
	case when hometeam_id = 9857 and home_goal > away_goal Then 'Bologna Win'
		when awayteam_id = 9857 and away_goal > home_goal Then 'Bologna Win' 
		End IS NOT Null;


--Create a CASE statement that identifies the id of matches played in the 2012/2013 season. Specify that you want ELSE values to be NULL.Wrap the CASE statement in a COUNT function and group the query by the country alias.

SELECT 
	c.name AS country,
    -- Count games from the 2012/2013 season
	count(case when  m.season = '2012/2013' 
        	then m.id ELSE NULL End) AS matches_2012_2013
FROM country AS c
LEFT JOIN match AS m
ON c.id = m.country_id
-- Group by country name alias
group by country;

--Create 3 CASE WHEN statements counting the matches played in each country across the 3 seasons.END your CASE statement without an ELSE clause.

SELECT 
	c.name AS country,
    -- Count matches in each of the 3 seasons
	count(case when m.season = '2012/2013' then m.id end) AS matches_2012_2013,
	count(case when m.season = '2013/2014' then m.id end) AS matches_2013_2014,
	count(case when m.season = '2014/2015' then m.id end) AS matches_2014_2015
FROM country AS c
LEFT JOIN match AS m
ON c.id = m.country_id
-- Group by country name alias
Group by country;

--Create 3 CASE statements to "count" matches in the '2012/2013', '2013/2014', and '2014/2015' seasons, respectively.Have each CASE statement return a 1 for every match you want to include, and a 0 for every match to exclude.Wrap the CASE statement in a SUM to return the total matches played in each season.Group the query by the country name alias.

SELECT 
	c.name AS country,
    -- Sum the total records in each season where the home team won
	sum(case when m.season = '2012/2013' AND m.home_goal > m.away_goal 
        THEN 1 ELSE 0 End) AS matches_2012_2013,
 	sum(case when m.season = '2013/2014' AND m.home_goal > m.away_goal  
        THEN 1 Else 0 End) AS matches_2013_2014,
	sum(case when m.season = '2014/2015' AND m.home_goal > m.away_goal  
        THEN 1 ELSE 0 End) AS matches_2014_2015
FROM country AS c
LEFT JOIN match AS m
ON c.id = m.country_id
-- Group by country name alias
GROUP BY country;

--create 3 CASE statements to COUNT the total number of home team wins, away team wins, and ties, which will allow you to examine the total number of records.

SELECT 
    c.name AS country,
    -- Count the home wins, away wins, and ties in each country
	Count(case when m.home_goal > m.away_goal THEN m.id 
        END) AS home_wins,
	Count(case when m.home_goal < m.away_goal THEN m.id 
        END) AS away_wins,
	Count(case when m.home_goal = m.away_goal THEN m.id 
        END) AS ties
FROM country AS c
LEFT JOIN matches AS m
ON c.id = m.country_id
GROUP BY country;


--Calculate the percentage of matches tied using a CASE statement inside AVG.Fill in the logical operators for each statement. Alias your columns as ties_2013_2014 and ties_2014_2015, respectively.Use the ROUND function to round to 2 decimal points.

SELECT 
	c.name AS country,
    -- Round the percentage of tied games to 2 decimal points
	Round(AVG(CASE WHEN m.season='2013/2014' AND m.home_goal = m.away_goal THEN 1
			 WHEN m.season='2013/2014' AND m.home_goal != m.away_goal THEN 0
			 END),2) AS pct_ties_2013_2014,
	Round(AVG(CASE WHEN m.season='2014/2015' AND m.home_goal = m.away_goal THEN 1
			 WHEN m.season='2014/2015' AND m.home_goal != m.away_goal THEN 0
			 END),2) AS pct_ties_2014_2015
FROM country AS c
LEFT JOIN matches AS m
ON c.id = m.country_id
GROUP BY country;


#################################### Subqueries ############################


--WHERE
--Create a subquery in the WHERE clause that retrieves all unique hometeam_ID values from the match table.Select the team_long_name and team_short_name from the team table. Exclude all values from the subquery in the main query.
	
	SELECT 
	-- Select the team long and short names
	team_long_name,
	team_short_name
FROM team 
-- Exclude all values from the subquery
WHERE team_api_id NOT IN
     (Select DISTINCT hometeam_ID  FROM match);

--Create a subquery in WHERE clause that retrieves all hometeam_ID values from match with a home_goal score greater than or equal to 8.Select the team_long_name and team_short_name from the team table. Include all values from the subquery in the main query.


SELECT
	-- Select the team long and short names
	team_long_name,
	team_short_name
FROM team
-- Filter for teams with 8 or more home goals
WHERE team_api_id IN
	  (SELECT hometeam_ID
       FROM match
       WHERE home_goal >= 8);



--FROM

--Complete the subquery inside the FROM clause. Select the country name from the country table, along with the date, the home goal, the away goal, and the total goals columns from the match table.
--Create a column in the subquery that adds home and away goals, called total_goals. This will be used to filter the main query.
--Select the country, date, home goals, and away goals in the main query.
--Filter the main query for games with 10 or more total goals.


SELECT
	-- Select country, date, home, and away goals from the subquery
    country,
    date,
    home_goal,
    away_goal
FROM 
	-- Select country name, date, home_goal, away_goal, and total goals in the subquery
	(SELECT c.name AS country, 
     	    m.date, 
     		m.home_goal, 
     		m.away_goal,
           (m.home_goal + m.away_goal) AS total_goals
    FROM match AS m
    LEFT JOIN country AS c
    ON m.country_id = c.id) AS subq
-- Filter by total goals scored in the main query
WHERE total_goals >= 10 ;


--In the subquery, select the average total goals by adding home_goal and away_goal.
--Filter the results so that only the average of goals in the 2013/2014 season is calculated.
--In the main query, select the average total goals by adding home_goal and away_goal. This calculates the average goals for each league.
--Filter the results in the main query the same way you filtered the subquery. Group the query by the league name.

SELECT 
	l.name AS league,
    -- Select and round the league's total goals
    ROUND(avg(m.home_goal + m.away_goal), 2) AS avg_goals,
    -- Select & round the average total goals for the season
    (SELECT ROUND(avg(home_goal + away_goal), 2) 
     FROM match
     WHERE season = '2013/2014') AS overall_avg
FROM league AS l
LEFT JOIN match AS m
ON l.country_id = m.country_id
-- Filter for the 2013/2014 season
WHERE season ='2013/2014'
GROUP BY l.name;

--Select the average goals scored in a match for each league in the main query.
--Select the average goals scored in a match overall for the 2013/2014 season in the subquery.
--Subtract the subquery from the average number of goals calculated for each league.
--Filter the main query so that only games from the 2013/2014 season are included.

SELECT
	-- Select the league name and average goals scored
	l.name AS league,
	ROUND(AVG(m.home_goal + m.away_goal),2) AS avg_goals,
    -- Subtract the overall average from the league average
	ROUND(AVG(m.home_goal + m.away_goal) -
		(SELECT AVG(home_goal + away_goal)
		 FROM match 
         WHERE season = '2013/2014'),2) AS diff
FROM league AS l
LEFT JOIN match AS m
ON l.country_id = m.country_id
-- Only include 2013/2014 results
WHERE season = '2013/2014'
GROUP BY l.name;

/*Extract the average number of home and away team goals in two SELECT subqueries.
--Calculate the average home and away goals for the specific stage in the main query.
--Filter both subqueries and the main query so that only data from the 2012/2013 season is included.
Group the query by the m.stage column.*/

SELECT 
	-- Select the stage and average goals for each stage
	m.stage,
    ROUND(AVG(m.home_goal + m.away_goal),2) AS avg_goals,
    -- Select the average overall goals for the 2012/2013 season
    ROUND((SELECT avg(home_goal + away_goal) 
           FROM match 
           WHERE season = '2012/2013'),2) AS overall
FROM match AS m
-- Filter for the 2012/2013 season
WHERE season = '2012/2013'
-- Group by stage
GROUP BY stage ;


/*Calculate the average home goals and average away goals from the match table for each stage in the FROM clause subquery.
Add a subquery to the WHERE clause that calculates the overall average home goals.
Filter the main query for stages where the average home goals is higher than the overall average.
Select the stage and avg_goals columns from the s subquery into the main query.*/

SELECT 
	-- Select the stage and average goals from the subquery
	stage,
	ROUND(avg_goals,2) AS avg_goals
FROM 
	-- Select the stage and average goals in 2012/2013
	(SELECT
		 stage,
         avg(home_goal + away_goal) AS avg_goals
	 FROM match
	 WHERE season = '2012/2013'
	 GROUP BY stage) AS s
WHERE 
	-- Filter the main query using the subquery
	s.avg_goals > (SELECT avg(home_goal + away_goal) 
                    FROM match WHERE season = '2012/2013');


/*Create a subquery in SELECT that yields the average goals scored in the 2012/2013 season. Name the new column overall_avg.
Create a subquery in FROM that calculates the average goals scored in each stage during the 2012/2013 season.
Filter the main query for stages where the average goals exceeds the overall average in 2012/2013.*/

SELECT 
	-- Select the stage and average goals from s
	stage,
    ROUND(s.avg_goals,2) AS avg_goal,
    -- Select the overall average for 2012/2013
    (select avg (home_goal + away_goal) from match  WHERE season = '2012/2013') AS overall_avg
FROM 
	-- Select the stage and average goals in 2012/2013 from match
	(SELECT
		 stage,
         avg(home_goal + away_goal) AS avg_goals
	 FROM match
	 WHERE season = '2012/2013'
	 GROUP BY stage) AS s
WHERE 
	-- Filter the main query using the subquery
	s.avg_goals > (SELECT avg(home_goal + away_goal) 
                    FROM match WHERE season = '2012/2013');




################ /*Correlated Queries, Nested Queries, and Common Table Expressions*/ #####################

